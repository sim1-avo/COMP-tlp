
terminal SEMI, COMMA, ID, INT, STRING, FLOAT, BOOL, LPAR, RPAR, COLON, PROC, CORP, VOID, IF, THEN, ELIF, FI,
ELSE, WHILE, DO, OD, READ, WRITE, ASSIGN, PLUS, MINUS, TIMES, DIV, EQ, NE, LT, LE, GT, GE, AND,
OR, NOT, NULL, TRUE, FALSE, INT_CONST, FLOAT_CONST, STRING_CONST, UMINUS, RETURN;

nonterminal Program, VarDeclList, ProcList, VarDecl, Type, IdListInit, Proc, ReturnExprs,
ParamDeclList, ParDecl, IdList, ResultType, ResultTypeList, StatList, Stat, IfStat, ElifList, Elif, Else, WhileStat, ReadlnStat,
WriteStat, AssignStat, CallProc, Expr, ExprList;

precedence left AND, OR;
precedence left GT, GE,LT, LE, EQ, NE;
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left DIV;
precedence left UMINUS;

/* The grammar rules */
Program ::= VarDeclList ProcList
;
VarDeclList ::= /* empty */
   | VarDecl VarDeclList
   ;

ProcList ::= ProcStatList
   | Proc ProcList
   ;
VarDecl ::= Type IdListInit SEMI
    ;
Type ::= INT | BOOL | FLOAT | STRING
    ;
IdListInit ::= ID
   | IdListInit COMMA ID
   | ID ASSIGN Expr
   | IdListInit COMMA ID ASSIGN Expr
   ;
Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON
      VarDeclList StatList RETURN ReturnExprs CORP SEMI
   | PROC ID LPAR RPAR ResultTypeList COLON
      VarDeclList StatList RETURN ReturnExprs CORP SEMI
   ;
ResultTypeList ::= ResultType
   | ResultType COMMA ResultTypeList
    ;
ReturnExprs::=  ExprList
   | /* empty */
    ;
ExprList ::= Expr:e {:R=e; :}
   | Expr COMMA ExprList
   ;

ParamDeclList ::= ParDecl | ParamDeclList SEMI ParDecl
    ;

ParDecl ::= Type IdList
    ;

IdList ::= ID | IdList COMMA ID
    ;

ResultType ::= Type | VOID
    ;

StatList ::= Stat  | Stat StatList
    ;

Stat ::= IfStat SEMI
   | WhileStat SEMI
   | ReadlnStat SEMI
   | WriteStat SEMI
   | AssignStat SEMI
   | CallProc SEMI
   ;

IfStat ::= IF Expr THEN StatList ElifList Else FI
   ;
ElifList ::= /* empty */
   | Elif ElifList
   ;
Elif ::= ELIF Expr THEN StatList
    ;
Else ::= /* empty */ | ELSE StatList
   ;
WhileStat ::= WHILE StatList RETURN Expr DO StatList OD
   | WHILE Expr DO StatList OD
   ;
ReadlnStat ::= READ LPAR IdList RPAR
    ;
WriteStat ::=  WRITE LPAR ExprList RPAR
    ;
AssignStat ::= IdList ASSIGN  ExprList
    ;
CallProc ::= ID LPAR ExprList RPAR
   | ID LPAR RPAR
   ;
Expr ::= NULL
   | TRUE
   | FALSE
   | INT_CONST
   | FLOAT_CONST
   | STRING_CONST
   | ID
    | CallProc
   | Expr:e  PLUS Expr:ee   {: R= new PlusOP(e,ee); :}
   | Expr:e  MINUS Expr:ee  {: R= new MinusOP(e,ee); :}
   | Expr:e  TIMES Expr:ee  {: R= new TimesOP(e,ee); :}
   | Expr:e  DIV Expr:ee    {: R= new DivOP(e,ee); :}
   | Expr:e  AND Expr:ee    {: R= new AndOP(e,ee); :}
   | Expr:e  OR Expr:ee     {: R= new OrOP(e,ee); :}
   | Expr:e  GT Expr:ee     {: R= new GreaterThanOP(e,ee); :}
   | Expr:e  GE Expr:ee     {: R= new GreaterEqualsOP(e,ee); :}
   | Expr:e  LT Expr:ee     {: R= new LessThanOP(e,ee); :}
   | Expr:e  LE Expr:ee     {: R= new LessEqualsOP(e,ee); :}
   | Expr:e  EQ Expr:ee     {: R= new EqualsOP(e,ee); :}
   | Expr:e  NE Expr:ee    {: R= new NotEqualsOP(e,ee); :}
   | MINUS Expr:e     {: R=-e; :}%prec UMINUS
   | NOT Expr:e   {: R= "!"+e; :}
    ;