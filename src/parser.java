
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\004\003\000\002\004\004" +
    "\000\002\005\005\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\007\000\002\010" +
    "\017\000\002\010\016\000\002\016\003\000\002\016\005" +
    "\000\002\011\003\000\002\011\002\000\002\033\003\000" +
    "\002\033\005\000\002\012\003\000\002\012\005\000\002" +
    "\013\004\000\002\014\003\000\002\014\005\000\002\015" +
    "\003\000\002\015\003\000\002\017\003\000\002\017\004" +
    "\000\002\020\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\021\011\000\002\022\002\000\002\022\004\000\002\023" +
    "\006\000\002\024\002\000\002\024\004\000\002\025\011" +
    "\000\002\025\007\000\002\026\006\000\002\027\006\000" +
    "\002\030\005\000\002\031\006\000\002\031\005\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\005" +
    "\000\002\032\004\000\002\032\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\014\007\013\010\007\011\012\012\011\016" +
    "\uffff\001\002\000\004\002\236\001\002\000\004\016\102" +
    "\001\002\000\004\006\015\001\002\000\010\005\ufff7\006" +
    "\ufff7\015\ufff7\001\002\000\026\006\uffff\007\013\010\007" +
    "\011\012\012\011\016\uffff\021\uffff\026\uffff\031\uffff\032" +
    "\uffff\001\002\000\010\005\ufff9\006\ufff9\015\ufff9\001\002" +
    "\000\010\005\ufff8\006\ufff8\015\ufff8\001\002\000\010\005" +
    "\ufffa\006\ufffa\015\ufffa\001\002\000\016\006\ufffe\016\ufffe" +
    "\021\ufffe\026\ufffe\031\ufffe\032\ufffe\001\002\000\010\004" +
    "\ufff6\005\ufff6\033\077\001\002\000\006\004\020\005\017" +
    "\001\002\000\004\006\021\001\002\000\026\006\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\012\ufffb\016\ufffb\021\ufffb\026\ufffb" +
    "\031\ufffb\032\ufffb\001\002\000\010\004\ufff5\005\ufff5\033" +
    "\022\001\002\000\024\006\034\035\023\050\035\051\032" +
    "\052\031\053\033\054\025\055\024\056\030\001\002\000" +
    "\024\006\034\035\023\050\035\051\032\052\031\053\033" +
    "\054\025\055\024\056\030\001\002\000\046\004\uffca\005" +
    "\uffca\014\uffca\017\uffca\022\uffca\027\uffca\034\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044" +
    "\uffca\045\uffca\046\uffca\047\uffca\001\002\000\046\004\uffcb" +
    "\005\uffcb\014\uffcb\017\uffcb\022\uffcb\027\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\001\002\000\036\004" +
    "\ufff3\005\ufff3\034\043\035\037\036\047\037\045\040\042" +
    "\041\050\042\051\043\044\044\046\045\041\046\040\047" +
    "\052\001\002\000\046\004\uffc7\005\uffc7\014\uffc7\017\uffc7" +
    "\022\uffc7\027\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\001\002\000\046\004\uffc9\005\uffc9\014\uffc9\017" +
    "\uffc9\022\uffc9\027\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\001\002\000\046\004\uffcd\005\uffcd\014\uffcd" +
    "\017\uffcd\022\uffcd\027\uffcd\034\uffcd\035\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\001\002\000\046\004\uffce\005\uffce\014" +
    "\uffce\017\uffce\022\uffce\027\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045" +
    "\uffce\046\uffce\047\uffce\001\002\000\046\004\uffcc\005\uffcc" +
    "\014\uffcc\017\uffcc\022\uffcc\027\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\001\002\000\050\004\uffc8\005" +
    "\uffc8\013\067\014\uffc8\017\uffc8\022\uffc8\027\uffc8\034\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\001\002\000\024" +
    "\006\034\035\023\050\035\051\032\052\031\053\033\054" +
    "\025\055\024\056\030\001\002\000\046\004\uffb9\005\uffb9" +
    "\014\uffb9\017\uffb9\022\uffb9\027\uffb9\034\043\035\037\036" +
    "\047\037\045\040\042\041\050\042\051\043\044\044\046" +
    "\045\041\046\040\047\052\001\002\000\024\006\034\035" +
    "\023\050\035\051\032\052\031\053\033\054\025\055\024" +
    "\056\030\001\002\000\024\006\034\035\023\050\035\051" +
    "\032\052\031\053\033\054\025\055\024\056\030\001\002" +
    "\000\024\006\034\035\023\050\035\051\032\052\031\053" +
    "\033\054\025\055\024\056\030\001\002\000\024\006\034" +
    "\035\023\050\035\051\032\052\031\053\033\054\025\055" +
    "\024\056\030\001\002\000\024\006\034\035\023\050\035" +
    "\051\032\052\031\053\033\054\025\055\024\056\030\001" +
    "\002\000\024\006\034\035\023\050\035\051\032\052\031" +
    "\053\033\054\025\055\024\056\030\001\002\000\024\006" +
    "\034\035\023\050\035\051\032\052\031\053\033\054\025" +
    "\055\024\056\030\001\002\000\024\006\034\035\023\050" +
    "\035\051\032\052\031\053\033\054\025\055\024\056\030" +
    "\001\002\000\024\006\034\035\023\050\035\051\032\052" +
    "\031\053\033\054\025\055\024\056\030\001\002\000\024" +
    "\006\034\035\023\050\035\051\032\052\031\053\033\054" +
    "\025\055\024\056\030\001\002\000\024\006\034\035\023" +
    "\050\035\051\032\052\031\053\033\054\025\055\024\056" +
    "\030\001\002\000\024\006\034\035\023\050\035\051\032" +
    "\052\031\053\033\054\025\055\024\056\030\001\002\000" +
    "\046\004\uffc1\005\uffc1\014\uffc1\017\uffc1\022\uffc1\027\uffc1" +
    "\034\043\035\037\036\047\037\045\040\042\041\050\042" +
    "\051\043\044\044\046\045\041\046\uffc1\047\uffc1\001\002" +
    "\000\046\004\uffbe\005\uffbe\014\uffbe\017\uffbe\022\uffbe\027" +
    "\uffbe\034\043\035\037\036\047\037\045\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\001" +
    "\002\000\046\004\uffbb\005\uffbb\014\uffbb\017\uffbb\022\uffbb" +
    "\027\uffbb\034\043\035\037\036\047\037\045\040\uffbb\041" +
    "\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\001\002\000\046\004\uffc4\005\uffc4\014\uffc4\017\uffc4\022" +
    "\uffc4\027\uffc4\034\uffc4\035\uffc4\036\uffc4\037\045\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047" +
    "\uffc4\001\002\000\046\004\uffc0\005\uffc0\014\uffc0\017\uffc0" +
    "\022\uffc0\027\uffc0\034\043\035\037\036\047\037\045\040" +
    "\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0" +
    "\047\uffc0\001\002\000\046\004\uffc3\005\uffc3\014\uffc3\017" +
    "\uffc3\022\uffc3\027\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\047\uffc3\001\002\000\046\004\uffbd\005\uffbd\014\uffbd" +
    "\017\uffbd\022\uffbd\027\uffbd\034\043\035\037\036\047\037" +
    "\045\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\001\002\000\046\004\uffc6\005\uffc6\014" +
    "\uffc6\017\uffc6\022\uffc6\027\uffc6\034\uffc6\035\uffc6\036\047" +
    "\037\045\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\001\002\000\046\004\uffbc\005\uffbc" +
    "\014\uffbc\017\uffbc\022\uffbc\027\uffbc\034\043\035\037\036" +
    "\047\037\045\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\001\002\000\046\004\uffbf\005" +
    "\uffbf\014\uffbf\017\uffbf\022\uffbf\027\uffbf\034\043\035\037" +
    "\036\047\037\045\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\045\uffbf\046\uffbf\047\uffbf\001\002\000\046\004\uffc2" +
    "\005\uffc2\014\uffc2\017\uffc2\022\uffc2\027\uffc2\034\043\035" +
    "\037\036\047\037\045\040\042\041\050\042\051\043\044" +
    "\044\046\045\041\046\uffc2\047\uffc2\001\002\000\046\004" +
    "\uffc5\005\uffc5\014\uffc5\017\uffc5\022\uffc5\027\uffc5\034\uffc5" +
    "\035\uffc5\036\047\037\045\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\001\002\000\026" +
    "\006\034\014\072\035\023\050\035\051\032\052\031\053" +
    "\033\054\025\055\024\056\030\001\002\000\042\004\uffec" +
    "\005\074\014\uffec\017\uffec\034\043\035\037\036\047\037" +
    "\045\040\042\041\050\042\051\043\044\044\046\045\041" +
    "\046\040\047\052\001\002\000\004\014\073\001\002\000" +
    "\046\004\uffcf\005\uffcf\014\uffcf\017\uffcf\022\uffcf\027\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\001\002" +
    "\000\046\004\uffd0\005\uffd0\014\uffd0\017\uffd0\022\uffd0\027" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\047\uffd0\001" +
    "\002\000\024\006\034\035\023\050\035\051\032\052\031" +
    "\053\033\054\025\055\024\056\030\001\002\000\010\004" +
    "\uffeb\014\uffeb\017\uffeb\001\002\000\046\004\uffba\005\uffba" +
    "\014\uffba\017\uffba\022\uffba\027\uffba\034\uffba\035\uffba\036" +
    "\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044\uffba" +
    "\045\uffba\046\uffba\047\uffba\001\002\000\024\006\034\035" +
    "\023\050\035\051\032\052\031\053\033\054\025\055\024" +
    "\056\030\001\002\000\036\004\ufff4\005\ufff4\034\043\035" +
    "\037\036\047\037\045\040\042\041\050\042\051\043\044" +
    "\044\046\045\041\046\040\047\052\001\002\000\004\002" +
    "\001\001\002\000\004\006\105\001\002\000\006\002\ufffd" +
    "\016\102\001\002\000\004\002\ufffc\001\002\000\004\013" +
    "\106\001\002\000\014\007\013\010\007\011\012\012\011" +
    "\014\111\001\002\000\004\006\217\001\002\000\006\004" +
    "\222\014\223\001\002\000\014\007\013\010\007\011\012" +
    "\012\011\020\116\001\002\000\006\004\uffea\014\uffea\001" +
    "\002\000\006\005\uffe5\015\uffe5\001\002\000\004\015\121" +
    "\001\002\000\006\005\117\015\ufff0\001\002\000\006\005" +
    "\uffe4\015\uffe4\001\002\000\014\007\013\010\007\011\012" +
    "\012\011\020\116\001\002\000\004\015\uffef\001\002\000" +
    "\024\006\uffff\007\013\010\007\011\012\012\011\021\uffff" +
    "\026\uffff\031\uffff\032\uffff\001\002\000\014\006\133\021" +
    "\130\026\124\031\123\032\134\001\002\000\004\013\216" +
    "\001\002\000\034\006\204\021\130\026\124\031\123\032" +
    "\134\035\023\050\035\051\032\052\031\053\033\054\025" +
    "\055\024\056\030\001\002\000\004\004\201\001\002\000" +
    "\004\004\200\001\002\000\004\004\177\001\002\000\024" +
    "\006\034\035\023\050\035\051\032\052\031\053\033\054" +
    "\025\055\024\056\030\001\002\000\004\004\160\001\002" +
    "\000\004\060\153\001\002\000\010\005\uffe7\013\067\033" +
    "\uffe7\001\002\000\004\013\150\001\002\000\004\004\147" +
    "\001\002\000\006\005\143\033\144\001\002\000\004\004" +
    "\142\001\002\000\026\006\133\021\130\023\uffe3\024\uffe3" +
    "\025\uffe3\026\124\030\uffe3\031\123\032\134\060\uffe3\001" +
    "\002\000\014\023\uffe2\024\uffe2\025\uffe2\030\uffe2\060\uffe2" +
    "\001\002\000\026\006\uffde\021\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\030\uffde\031\uffde\032\uffde\060\uffde\001\002" +
    "\000\004\006\146\001\002\000\024\006\034\035\023\050" +
    "\035\051\032\052\031\053\033\054\025\055\024\056\030" +
    "\001\002\000\004\004\uffd1\001\002\000\012\004\uffe6\005" +
    "\uffe6\014\uffe6\033\uffe6\001\002\000\026\006\uffdf\021\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf\031\uffdf\032" +
    "\uffdf\060\uffdf\001\002\000\024\006\034\035\023\050\035" +
    "\051\032\052\031\053\033\054\025\055\024\056\030\001" +
    "\002\000\004\014\152\001\002\000\004\004\uffd2\001\002" +
    "\000\026\006\034\017\uffed\035\023\050\035\051\032\052" +
    "\031\053\033\054\025\055\024\056\030\001\002\000\004" +
    "\017\uffee\001\002\000\004\017\156\001\002\000\004\004" +
    "\157\001\002\000\006\002\ufff1\016\ufff1\001\002\000\026" +
    "\006\uffdd\021\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\060\uffdd\001\002\000\034\022\162" +
    "\034\043\035\037\036\047\037\045\040\042\041\050\042" +
    "\051\043\044\044\046\045\041\046\040\047\052\001\002" +
    "\000\014\006\133\021\130\026\124\031\123\032\134\001" +
    "\002\000\010\023\165\024\uffda\025\uffda\001\002\000\006" +
    "\024\uffd7\025\173\001\002\000\024\006\034\035\023\050" +
    "\035\051\032\052\031\053\033\054\025\055\024\056\030" +
    "\001\002\000\010\023\165\024\uffda\025\uffda\001\002\000" +
    "\006\024\uffd9\025\uffd9\001\002\000\034\022\171\034\043" +
    "\035\037\036\047\037\045\040\042\041\050\042\051\043" +
    "\044\044\046\045\041\046\040\047\052\001\002\000\014" +
    "\006\133\021\130\026\124\031\123\032\134\001\002\000" +
    "\010\023\uffd8\024\uffd8\025\uffd8\001\002\000\014\006\133" +
    "\021\130\026\124\031\123\032\134\001\002\000\004\024" +
    "\175\001\002\000\004\004\uffdb\001\002\000\004\024\uffd6" +
    "\001\002\000\026\006\uffe1\021\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\030\uffe1\031\uffe1\032\uffe1\060\uffe1\001\002" +
    "\000\026\006\uffdc\021\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\060\uffdc\001\002\000\026" +
    "\006\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\060\uffe0\001\002\000\036\004\200" +
    "\027\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\001\002\000\034\027\213\034\043\035\037\036\047\037" +
    "\045\040\042\041\050\042\051\043\044\044\046\045\041" +
    "\046\040\047\052\001\002\000\042\005\uffe7\013\067\027" +
    "\uffc8\033\uffe7\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\001\002\000\004\060\206\001\002\000\024\006\034" +
    "\035\023\050\035\051\032\052\031\053\033\054\025\055" +
    "\024\056\030\001\002\000\034\027\210\034\043\035\037" +
    "\036\047\037\045\040\042\041\050\042\051\043\044\044" +
    "\046\045\041\046\040\047\052\001\002\000\014\006\133" +
    "\021\130\026\124\031\123\032\134\001\002\000\004\030" +
    "\212\001\002\000\004\004\uffd5\001\002\000\014\006\133" +
    "\021\130\026\124\031\123\032\134\001\002\000\004\030" +
    "\215\001\002\000\004\004\uffd4\001\002\000\004\006\217" +
    "\001\002\000\010\004\uffe7\005\uffe7\014\uffe7\001\002\000" +
    "\006\005\143\014\221\001\002\000\004\004\uffd3\001\002" +
    "\000\012\007\013\010\007\011\012\012\011\001\002\000" +
    "\014\007\013\010\007\011\012\012\011\020\116\001\002" +
    "\000\004\015\225\001\002\000\024\006\uffff\007\013\010" +
    "\007\011\012\012\011\021\uffff\026\uffff\031\uffff\032\uffff" +
    "\001\002\000\014\006\133\021\130\026\124\031\123\032" +
    "\134\001\002\000\004\060\230\001\002\000\026\006\034" +
    "\017\uffed\035\023\050\035\051\032\052\031\053\033\054" +
    "\025\055\024\056\030\001\002\000\004\017\232\001\002" +
    "\000\004\004\233\001\002\000\006\002\ufff2\016\ufff2\001" +
    "\002\000\006\004\uffe9\014\uffe9\001\002\000\010\004\uffe8" +
    "\005\143\014\uffe8\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\012\002\003\003\004\005\007\006\005\001" +
    "\001\000\002\001\001\000\006\004\100\010\102\001\001" +
    "\000\004\007\015\001\001\000\002\001\001\000\010\003" +
    "\013\005\007\006\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\026\032\025\001\001\000" +
    "\006\031\026\032\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\026\032\035\001\001\000" +
    "\002\001\001\000\006\031\026\032\065\001\001\000\006" +
    "\031\026\032\064\001\001\000\006\031\026\032\063\001" +
    "\001\000\006\031\026\032\062\001\001\000\006\031\026" +
    "\032\061\001\001\000\006\031\026\032\060\001\001\000" +
    "\006\031\026\032\057\001\001\000\006\031\026\032\056" +
    "\001\001\000\006\031\026\032\055\001\001\000\006\031" +
    "\026\032\054\001\001\000\006\031\026\032\053\001\001" +
    "\000\006\031\026\032\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\026\032\067\033\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\026\032\067\033\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\026" +
    "\032\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\103\010\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\106\012\107\013" +
    "\111\001\001\000\004\014\234\001\001\000\002\001\001" +
    "\000\010\006\112\015\114\016\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\112\015\114\016\117\001" +
    "\001\000\002\001\001\000\010\003\121\005\007\006\005" +
    "\001\001\000\024\014\135\017\131\020\137\021\126\025" +
    "\124\026\134\027\136\030\130\031\125\001\001\000\002" +
    "\001\001\000\026\014\135\017\204\020\137\021\126\025" +
    "\124\026\134\027\136\030\130\031\201\032\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\026\032\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\014\135" +
    "\017\140\020\137\021\126\025\124\026\134\027\136\030" +
    "\130\031\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\031\026\032\067\033\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\031\026\032\067\033\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\154\031\026\032\067" +
    "\033\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\014\135\017\162\020\137\021\126\025" +
    "\124\026\134\027\136\030\130\031\125\001\001\000\006" +
    "\022\163\023\165\001\001\000\004\024\173\001\001\000" +
    "\006\031\026\032\167\001\001\000\006\022\166\023\165" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\014" +
    "\135\017\171\020\137\021\126\025\124\026\134\027\136" +
    "\030\130\031\125\001\001\000\002\001\001\000\024\014" +
    "\135\017\175\020\137\021\126\025\124\026\134\027\136" +
    "\030\130\031\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\026\032\206" +
    "\001\001\000\002\001\001\000\024\014\135\017\210\020" +
    "\137\021\126\025\124\026\134\027\136\030\130\031\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\014" +
    "\135\017\213\020\137\021\126\025\124\026\134\027\136" +
    "\030\130\031\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\217\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\106\013\233\001" +
    "\001\000\010\006\112\015\114\016\223\001\001\000\002" +
    "\001\001\000\010\003\225\005\007\006\005\001\001\000" +
    "\024\014\135\017\226\020\137\021\126\025\124\026\134" +
    "\027\136\030\130\031\125\001\001\000\002\001\001\000" +
    "\012\011\230\031\026\032\067\033\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList ProcList 
            {
              Object RESULT =null;
		int vdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vdList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		R= new ProgramOP(vdList, pList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= 
            {
              Object RESULT =null;
		R=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= VarDecl VarDeclList 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vdList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList list= new ArrayList(); list.add(vd); list.addAll(vdList); R=list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProcList ::= Proc 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList list= new ArrayList(); list.add(p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProcList ::= Proc ProcList 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList list= new ArrayList(); list.add(p); list.addAll(pList); R=list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdListInit SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object iListInit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		R=VarDeclOP(t,iListInit);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= INT 
            {
              Object RESULT =null;
		R= 'int';
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= BOOL 
            {
              Object RESULT =null;
		R= 'bool';
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= FLOAT 
            {
              Object RESULT =null;
		R= 'float';
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= STRING 
            {
              Object RESULT =null;
		R= 'String';
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IdListInit ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R= new IdListInitOP(val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IdListInit ::= IdListInit COMMA ID 
            {
              Object RESULT =null;
		int iListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object iListInit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<IdListInitOP> list= iListInit; list.add(new IdListInitOP(val)); R= list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= ID ASSIGN Expr 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R= new IdListInitOP(val, e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              Object RESULT =null;
		int iListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object iListInit = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		ArrayList<IdListInitOP> list= iListInit; list.add(new IdListInitOP(val, e)); R= list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON VarDeclList StatList RETURN ReturnExprs CORP SEMI 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object pdList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int rtListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rtListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object rtList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object vdList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object sList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		R= new ProcOP(val, pdList, rtList, new ProcBodyOP( vdList, sList, re));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc ::= PROC ID LPAR RPAR ResultTypeList COLON VarDeclList StatList RETURN ReturnExprs CORP SEMI 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rtListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rtListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object rtList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object vdList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object sList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		R= new ProcOP(val, rtList, new ProcBodyOP( vdList, sList, re));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ResultTypeList ::= ResultType 
            {
              Object RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		R=rt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ResultTypeList ::= ResultType COMMA ResultTypeList 
            {
              Object RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rtListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rtList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList list= new ArrayList(); list.add(rt); list.addAll(rtList); R=list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ReturnExprs ::= ExprList 
            {
              Object RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		R=eList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ReturnExprs ::= 
            {
              Object RESULT =null;
		R=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ExprList ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		R=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ExprList ::= Expr COMMA ExprList 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList list= new ArrayList(); list.add(e); list.addAll(eList); R=list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ParamDeclList ::= ParDecl 
            {
              Object RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R=pd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ParamDeclList ::= ParamDeclList SEMI ParDecl 
            {
              Object RESULT =null;
		int pdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pdList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList list= new ArrayList(); list.addAll(pdList);  list.add(pd); R=list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ParDecl ::= Type IdList 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		R= new ParDeclOP(t, iList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IdList ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		R= val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IdList ::= IdList COMMA ID 
            {
              Object RESULT =null;
		int iListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object iList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList list= new ArrayList();  list.addAll(iList); list.add(val); R=list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ResultType ::= Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		R=t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultType",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ResultType ::= VOID 
            {
              Object RESULT =null;
		R= 'void';
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultType",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // StatList ::= Stat 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R=s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // StatList ::= Stat StatList 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList list= new ArrayList(); list.add(s); list.addAll(sList); R=list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stat ::= IfStat SEMI 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 R= is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stat ::= WhileStat SEMI 
            {
              Object RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ws = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 R= ws; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= ReadlnStat SEMI 
            {
              Object RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object rs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 R= rs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= WriteStat SEMI 
            {
              Object RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ws = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 R= ws; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= AssignStat SEMI 
            {
              Object RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object as = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 R= as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= CallProc SEMI 
            {
              Object RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 R= cp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IfStat ::= IF Expr THEN StatList ElifList Else FI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object elList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 R= new IfOP(e, sList, elList, el); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ElifList ::= 
            {
              Object RESULT =null;
		R= null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElifList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ElifList ::= Elif ElifList 
            {
              Object RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object elif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList list= new ArrayList(); list.add(elif); if(elList != null)list.addAll(elList); R=list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElifList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Elif ::= ELIF Expr THEN StatList 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R=new ElifOP(e, sList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Else ::= 
            {
              Object RESULT =null;
		 R= null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Else ::= ELSE StatList 
            {
              Object RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R= new ElseOP(sList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // WhileStat ::= WHILE StatList RETURN Expr DO StatList OD 
            {
              Object RESULT =null;
		int sList1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sList1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object sList1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sList2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sList2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sList2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 R= new WhileOP(sList1,e , sList2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // WhileStat ::= WHILE Expr DO StatList OD 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sList = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 R= new WhileOP(e,sList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ReadlnStat ::= READ LPAR IdList RPAR 
            {
              Object RESULT =null;
		int ilistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ilist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 R= new ReadOP(ilist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadlnStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WriteStat ::= WRITE LPAR ExprList RPAR 
            {
              Object RESULT =null;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object elist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 R= new WriteOP(elist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AssignStat ::= IdList ASSIGN ExprList 
            {
              Object RESULT =null;
		int ilistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ilist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		R= new AssignOP(ilist, elist);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CallProc ::= ID LPAR ExprList RPAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object elist = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 R= new CallProcOP(val, elist);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallProc",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CallProc ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 R= new CallProcOP(val) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallProc",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr ::= NULL 
            {
              Object RESULT =null;
		R=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr ::= TRUE 
            {
              Object RESULT =null;
		R=true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= FALSE 
            {
              Object RESULT =null;
		R=false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= INT_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		R=val ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= FLOAT_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		R=val ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= STRING_CONST 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		R=val ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		R=val ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= CallProc 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R= new PlusOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R= new MinusOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R= new TimesOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R= new DivOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R= new AndOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R= new OrOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R= new GreaterThanOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R= new GreaterEqualsOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R= new LessThanOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R= new LessEqualsOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R= new EqualsOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R= new NotEqualsOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R=-e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 R= "!"+e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
