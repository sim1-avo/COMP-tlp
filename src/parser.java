
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\033\004\000\002\002\004\000\002\032" +
    "\002\000\002\032\004\000\002\031\003\000\002\031\004" +
    "\000\002\030\005\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\026\003\000\002" +
    "\026\005\000\002\026\005\000\002\026\007\000\002\025" +
    "\017\000\002\025\016\000\002\025\016\000\002\025\015" +
    "\000\002\024\003\000\002\024\005\000\002\023\003\000" +
    "\002\023\002\000\002\022\003\000\002\022\005\000\002" +
    "\021\003\000\002\021\005\000\002\020\004\000\002\017" +
    "\003\000\002\017\005\000\002\016\003\000\002\016\003" +
    "\000\002\015\003\000\002\015\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\014\004\000\002\013\011\000\002\012" +
    "\002\000\002\012\004\000\002\011\006\000\002\010\002" +
    "\000\002\010\004\000\002\007\011\000\002\007\007\000" +
    "\002\005\006\000\002\006\006\000\002\004\005\000\002" +
    "\003\006\000\002\003\005\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\004\000" +
    "\002\002\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\014\006\013\007\007\010\012\011\011\015" +
    "\uffff\001\002\000\004\002\246\001\002\000\004\015\102" +
    "\001\002\000\004\053\015\001\002\000\010\005\ufff7\014" +
    "\ufff7\053\ufff7\001\002\000\030\006\013\007\007\010\012" +
    "\011\011\015\uffff\020\uffff\025\uffff\030\uffff\031\uffff\052" +
    "\uffff\053\uffff\001\002\000\010\005\ufff9\014\ufff9\053\ufff9" +
    "\001\002\000\010\005\ufff8\014\ufff8\053\ufff8\001\002\000" +
    "\010\005\ufffa\014\ufffa\053\ufffa\001\002\000\020\015\ufffe" +
    "\020\ufffe\025\ufffe\030\ufffe\031\ufffe\052\ufffe\053\ufffe\001" +
    "\002\000\010\004\ufff6\005\ufff6\032\077\001\002\000\006" +
    "\004\020\005\017\001\002\000\004\053\021\001\002\000" +
    "\030\006\ufffb\007\ufffb\010\ufffb\011\ufffb\015\ufffb\020\ufffb" +
    "\025\ufffb\030\ufffb\031\ufffb\052\ufffb\053\ufffb\001\002\000" +
    "\010\004\ufff5\005\ufff5\032\022\001\002\000\024\034\024" +
    "\047\035\050\032\053\034\054\031\055\025\056\023\057" +
    "\030\060\033\001\002\000\046\004\uffc8\005\uffc8\013\uffc8" +
    "\016\uffc8\021\uffc8\026\uffc8\033\uffc8\034\uffc8\035\uffc8\036" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8" +
    "\045\uffc8\046\uffc8\001\002\000\024\034\024\047\035\050" +
    "\032\053\034\054\031\055\025\056\023\057\030\060\033" +
    "\001\002\000\046\004\uffc9\005\uffc9\013\uffc9\016\uffc9\021" +
    "\uffc9\026\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\001\002\000\036\004\ufff3\005\ufff3\033\042\034\037" +
    "\035\047\036\045\037\043\040\050\041\051\042\044\043" +
    "\046\044\041\045\040\046\052\001\002\000\046\004\uffc5" +
    "\005\uffc5\013\uffc5\016\uffc5\021\uffc5\026\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\044\uffc5\045\uffc5\046\uffc5\001\002\000\046\004" +
    "\uffcb\005\uffcb\013\uffcb\016\uffcb\021\uffcb\026\uffcb\033\uffcb" +
    "\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\001\002\000\046" +
    "\004\uffc7\005\uffc7\013\uffc7\016\uffc7\021\uffc7\026\uffc7\033" +
    "\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\001\002\000" +
    "\046\004\uffcc\005\uffcc\013\uffcc\016\uffcc\021\uffcc\026\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041" +
    "\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\001\002" +
    "\000\046\004\uffca\005\uffca\013\uffca\016\uffca\021\uffca\026" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\001" +
    "\002\000\050\004\uffc6\005\uffc6\012\067\013\uffc6\016\uffc6" +
    "\021\uffc6\026\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\001\002\000\024\034\024\047\035\050\032\053" +
    "\034\054\031\055\025\056\023\057\030\060\033\001\002" +
    "\000\046\004\uffb7\005\uffb7\013\uffb7\016\uffb7\021\uffb7\026" +
    "\uffb7\033\042\034\037\035\047\036\045\037\043\040\050" +
    "\041\051\042\044\043\046\044\041\045\040\046\052\001" +
    "\002\000\024\034\024\047\035\050\032\053\034\054\031" +
    "\055\025\056\023\057\030\060\033\001\002\000\024\034" +
    "\024\047\035\050\032\053\034\054\031\055\025\056\023" +
    "\057\030\060\033\001\002\000\024\034\024\047\035\050" +
    "\032\053\034\054\031\055\025\056\023\057\030\060\033" +
    "\001\002\000\024\034\024\047\035\050\032\053\034\054" +
    "\031\055\025\056\023\057\030\060\033\001\002\000\024" +
    "\034\024\047\035\050\032\053\034\054\031\055\025\056" +
    "\023\057\030\060\033\001\002\000\024\034\024\047\035" +
    "\050\032\053\034\054\031\055\025\056\023\057\030\060" +
    "\033\001\002\000\024\034\024\047\035\050\032\053\034" +
    "\054\031\055\025\056\023\057\030\060\033\001\002\000" +
    "\024\034\024\047\035\050\032\053\034\054\031\055\025" +
    "\056\023\057\030\060\033\001\002\000\024\034\024\047" +
    "\035\050\032\053\034\054\031\055\025\056\023\057\030" +
    "\060\033\001\002\000\024\034\024\047\035\050\032\053" +
    "\034\054\031\055\025\056\023\057\030\060\033\001\002" +
    "\000\024\034\024\047\035\050\032\053\034\054\031\055" +
    "\025\056\023\057\030\060\033\001\002\000\024\034\024" +
    "\047\035\050\032\053\034\054\031\055\025\056\023\057" +
    "\030\060\033\001\002\000\046\004\uffbf\005\uffbf\013\uffbf" +
    "\016\uffbf\021\uffbf\026\uffbf\033\042\034\037\035\047\036" +
    "\045\037\043\040\050\041\051\042\044\043\046\044\041" +
    "\045\uffbf\046\uffbf\001\002\000\046\004\uffbc\005\uffbc\013" +
    "\uffbc\016\uffbc\021\uffbc\026\uffbc\033\042\034\037\035\047" +
    "\036\045\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044" +
    "\uffbc\045\uffbc\046\uffbc\001\002\000\046\004\uffb9\005\uffb9" +
    "\013\uffb9\016\uffb9\021\uffb9\026\uffb9\033\042\034\037\035" +
    "\047\036\045\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9" +
    "\044\uffb9\045\uffb9\046\uffb9\001\002\000\046\004\uffc2\005" +
    "\uffc2\013\uffc2\016\uffc2\021\uffc2\026\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\036\045\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\001\002\000\046\004\uffbe" +
    "\005\uffbe\013\uffbe\016\uffbe\021\uffbe\026\uffbe\033\042\034" +
    "\037\035\047\036\045\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\001\002\000\046\004" +
    "\uffc1\005\uffc1\013\uffc1\016\uffc1\021\uffc1\026\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\001\002\000\046" +
    "\004\uffbb\005\uffbb\013\uffbb\016\uffbb\021\uffbb\026\uffbb\033" +
    "\042\034\037\035\047\036\045\037\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\001\002\000" +
    "\046\004\uffba\005\uffba\013\uffba\016\uffba\021\uffba\026\uffba" +
    "\033\042\034\037\035\047\036\045\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba\001\002" +
    "\000\046\004\uffc4\005\uffc4\013\uffc4\016\uffc4\021\uffc4\026" +
    "\uffc4\033\uffc4\034\uffc4\035\047\036\045\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\001" +
    "\002\000\046\004\uffbd\005\uffbd\013\uffbd\016\uffbd\021\uffbd" +
    "\026\uffbd\033\042\034\037\035\047\036\045\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\001\002\000\046\004\uffc0\005\uffc0\013\uffc0\016\uffc0\021" +
    "\uffc0\026\uffc0\033\042\034\037\035\047\036\045\037\043" +
    "\040\050\041\051\042\044\043\046\044\041\045\uffc0\046" +
    "\uffc0\001\002\000\046\004\uffc3\005\uffc3\013\uffc3\016\uffc3" +
    "\021\uffc3\026\uffc3\033\uffc3\034\uffc3\035\047\036\045\037" +
    "\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\046\uffc3\001\002\000\026\013\072\034\024\047\035\050" +
    "\032\053\034\054\031\055\025\056\023\057\030\060\033" +
    "\001\002\000\042\004\uffea\005\074\013\uffea\016\uffea\033" +
    "\042\034\037\035\047\036\045\037\043\040\050\041\051" +
    "\042\044\043\046\044\041\045\040\046\052\001\002\000" +
    "\004\013\073\001\002\000\046\004\uffcd\005\uffcd\013\uffcd" +
    "\016\uffcd\021\uffcd\026\uffcd\033\uffcd\034\uffcd\035\uffcd\036" +
    "\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\046\uffcd\001\002\000\046\004\uffce\005\uffce\013" +
    "\uffce\016\uffce\021\uffce\026\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\001\002\000\024\034\024\047\035" +
    "\050\032\053\034\054\031\055\025\056\023\057\030\060" +
    "\033\001\002\000\010\004\uffe9\013\uffe9\016\uffe9\001\002" +
    "\000\046\004\uffb8\005\uffb8\013\uffb8\016\uffb8\021\uffb8\026" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8" +
    "\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\001" +
    "\002\000\024\034\024\047\035\050\032\053\034\054\031" +
    "\055\025\056\023\057\030\060\033\001\002\000\036\004" +
    "\ufff4\005\ufff4\033\042\034\037\035\047\036\045\037\043" +
    "\040\050\041\051\042\044\043\046\044\041\045\040\046" +
    "\052\001\002\000\004\002\001\001\002\000\004\053\105" +
    "\001\002\000\006\002\ufffd\015\102\001\002\000\004\002" +
    "\ufffc\001\002\000\004\012\106\001\002\000\014\006\013" +
    "\007\007\010\012\011\011\013\111\001\002\000\004\053" +
    "\223\001\002\000\006\004\226\013\227\001\002\000\014" +
    "\006\013\007\007\010\012\011\011\017\116\001\002\000" +
    "\006\004\uffe8\013\uffe8\001\002\000\006\005\uffe3\014\uffe3" +
    "\001\002\000\004\014\121\001\002\000\006\005\117\014" +
    "\uffee\001\002\000\006\005\uffe2\014\uffe2\001\002\000\014" +
    "\006\013\007\007\010\012\011\011\017\116\001\002\000" +
    "\004\014\uffed\001\002\000\026\006\013\007\007\010\012" +
    "\011\011\020\uffff\025\uffff\030\uffff\031\uffff\052\uffff\053" +
    "\uffff\001\002\000\016\020\130\025\124\030\123\031\134" +
    "\052\141\053\133\001\002\000\004\012\222\001\002\000" +
    "\034\020\130\025\124\030\123\031\134\034\024\047\035" +
    "\050\032\053\210\054\031\055\025\056\023\057\030\060" +
    "\033\001\002\000\004\004\205\001\002\000\004\004\204" +
    "\001\002\000\004\004\203\001\002\000\024\034\024\047" +
    "\035\050\032\053\034\054\031\055\025\056\023\057\030" +
    "\060\033\001\002\000\004\052\161\001\002\000\004\004" +
    "\160\001\002\000\010\005\uffe5\012\067\032\uffe5\001\002" +
    "\000\004\012\155\001\002\000\004\004\154\001\002\000" +
    "\006\005\150\032\151\001\002\000\004\004\147\001\002" +
    "\000\026\020\130\022\uffe1\023\uffe1\024\uffe1\025\124\027" +
    "\uffe1\030\123\031\134\052\uffe1\053\133\001\002\000\026" +
    "\016\uffeb\034\024\047\035\050\032\053\034\054\031\055" +
    "\025\056\023\057\030\060\033\001\002\000\004\016\uffec" +
    "\001\002\000\004\016\144\001\002\000\004\004\145\001" +
    "\002\000\006\002\uffef\015\uffef\001\002\000\014\022\uffe0" +
    "\023\uffe0\024\uffe0\027\uffe0\052\uffe0\001\002\000\026\020" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\052\uffdc\053\uffdc\001\002\000\004\053\153\001" +
    "\002\000\024\034\024\047\035\050\032\053\034\054\031" +
    "\055\025\056\023\057\030\060\033\001\002\000\004\004" +
    "\uffcf\001\002\000\012\004\uffe4\005\uffe4\013\uffe4\032\uffe4" +
    "\001\002\000\026\020\uffdd\022\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\052\uffdd\053\uffdd\001\002" +
    "\000\024\034\024\047\035\050\032\053\034\054\031\055" +
    "\025\056\023\057\030\060\033\001\002\000\004\013\157" +
    "\001\002\000\004\004\uffd0\001\002\000\026\020\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\052\uffdb\053\uffdb\001\002\000\026\016\uffeb\034\024\047" +
    "\035\050\032\053\034\054\031\055\025\056\023\057\030" +
    "\060\033\001\002\000\004\016\163\001\002\000\004\004" +
    "\164\001\002\000\006\002\ufff0\015\ufff0\001\002\000\034" +
    "\021\166\033\042\034\037\035\047\036\045\037\043\040" +
    "\050\041\051\042\044\043\046\044\041\045\040\046\052" +
    "\001\002\000\014\020\130\025\124\030\123\031\134\053" +
    "\133\001\002\000\010\022\171\023\uffd8\024\uffd8\001\002" +
    "\000\006\023\uffd5\024\177\001\002\000\024\034\024\047" +
    "\035\050\032\053\034\054\031\055\025\056\023\057\030" +
    "\060\033\001\002\000\010\022\171\023\uffd8\024\uffd8\001" +
    "\002\000\006\023\uffd7\024\uffd7\001\002\000\034\021\175" +
    "\033\042\034\037\035\047\036\045\037\043\040\050\041" +
    "\051\042\044\043\046\044\041\045\040\046\052\001\002" +
    "\000\014\020\130\025\124\030\123\031\134\053\133\001" +
    "\002\000\010\022\uffd6\023\uffd6\024\uffd6\001\002\000\014" +
    "\020\130\025\124\030\123\031\134\053\133\001\002\000" +
    "\004\023\201\001\002\000\004\004\uffd9\001\002\000\004" +
    "\023\uffd4\001\002\000\026\020\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\027\uffdf\030\uffdf\031\uffdf\052\uffdf\053\uffdf" +
    "\001\002\000\026\020\uffda\022\uffda\023\uffda\024\uffda\025" +
    "\uffda\027\uffda\030\uffda\031\uffda\052\uffda\053\uffda\001\002" +
    "\000\026\020\uffde\022\uffde\023\uffde\024\uffde\025\uffde\027" +
    "\uffde\030\uffde\031\uffde\052\uffde\053\uffde\001\002\000\036" +
    "\004\204\026\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5" +
    "\046\uffc5\001\002\000\034\026\217\033\042\034\037\035" +
    "\047\036\045\037\043\040\050\041\051\042\044\043\046" +
    "\044\041\045\040\046\052\001\002\000\042\005\uffe5\012" +
    "\067\026\uffc6\032\uffe5\033\uffc6\034\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\001\002\000\004\052\212\001\002\000\024" +
    "\034\024\047\035\050\032\053\034\054\031\055\025\056" +
    "\023\057\030\060\033\001\002\000\034\026\214\033\042" +
    "\034\037\035\047\036\045\037\043\040\050\041\051\042" +
    "\044\043\046\044\041\045\040\046\052\001\002\000\014" +
    "\020\130\025\124\030\123\031\134\053\133\001\002\000" +
    "\004\027\216\001\002\000\004\004\uffd3\001\002\000\014" +
    "\020\130\025\124\030\123\031\134\053\133\001\002\000" +
    "\004\027\221\001\002\000\004\004\uffd2\001\002\000\004" +
    "\053\223\001\002\000\010\004\uffe5\005\uffe5\013\uffe5\001" +
    "\002\000\006\005\150\013\225\001\002\000\004\004\uffd1" +
    "\001\002\000\012\006\013\007\007\010\012\011\011\001" +
    "\002\000\014\006\013\007\007\010\012\011\011\017\116" +
    "\001\002\000\004\014\231\001\002\000\026\006\013\007" +
    "\007\010\012\011\011\020\uffff\025\uffff\030\uffff\031\uffff" +
    "\052\uffff\053\uffff\001\002\000\016\020\130\025\124\030" +
    "\123\031\134\052\234\053\133\001\002\000\004\052\240" +
    "\001\002\000\026\016\uffeb\034\024\047\035\050\032\053" +
    "\034\054\031\055\025\056\023\057\030\060\033\001\002" +
    "\000\004\016\236\001\002\000\004\004\237\001\002\000" +
    "\006\002\ufff1\015\ufff1\001\002\000\026\016\uffeb\034\024" +
    "\047\035\050\032\053\034\054\031\055\025\056\023\057" +
    "\030\060\033\001\002\000\004\016\242\001\002\000\004" +
    "\004\243\001\002\000\006\002\ufff2\015\ufff2\001\002\000" +
    "\006\004\uffe7\013\uffe7\001\002\000\010\004\uffe6\005\150" +
    "\013\uffe6\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\012\027\005\030\007\032\004\033\003\001" +
    "\001\000\002\001\001\000\006\025\102\031\100\001\001" +
    "\000\004\026\015\001\001\000\002\001\001\000\010\027" +
    "\005\030\007\032\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\025\003\026\001\001\000" +
    "\002\001\001\000\006\002\075\003\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\035\003\026\001\001\000" +
    "\002\001\001\000\006\002\065\003\026\001\001\000\006" +
    "\002\064\003\026\001\001\000\006\002\063\003\026\001" +
    "\001\000\006\002\062\003\026\001\001\000\006\002\061" +
    "\003\026\001\001\000\006\002\060\003\026\001\001\000" +
    "\006\002\057\003\026\001\001\000\006\002\056\003\026" +
    "\001\001\000\006\002\055\003\026\001\001\000\006\002" +
    "\054\003\026\001\001\000\006\002\053\003\026\001\001" +
    "\000\006\002\052\003\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\067\003\026\022\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\067\003\026\022\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\077" +
    "\003\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\025\102\031\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\111\021\107\027" +
    "\106\001\001\000\004\017\244\001\001\000\002\001\001" +
    "\000\010\016\114\024\113\027\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\114\024\117\027\112\001" +
    "\001\000\002\001\001\000\010\027\005\030\007\032\121" +
    "\001\001\000\024\003\125\004\131\005\134\006\136\007" +
    "\124\013\126\014\137\015\130\017\135\001\001\000\002" +
    "\001\001\000\026\002\206\003\205\004\131\005\134\006" +
    "\136\007\124\013\126\014\137\015\210\017\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\164\003\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\125" +
    "\004\131\005\134\006\136\007\124\013\126\014\137\015" +
    "\145\017\135\001\001\000\012\002\067\003\026\022\141" +
    "\023\142\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\067\003\026\022" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\067\003\026\022\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\067\003\026\022\141\023\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\125\004\131\005\134\006\136\007\124\013" +
    "\126\014\137\015\166\017\135\001\001\000\006\011\171" +
    "\012\167\001\001\000\004\010\177\001\001\000\006\002" +
    "\173\003\026\001\001\000\006\011\171\012\172\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\125\004" +
    "\131\005\134\006\136\007\124\013\126\014\137\015\175" +
    "\017\135\001\001\000\002\001\001\000\024\003\125\004" +
    "\131\005\134\006\136\007\124\013\126\014\137\015\201" +
    "\017\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\212\003\026\001\001" +
    "\000\002\001\001\000\024\003\125\004\131\005\134\006" +
    "\136\007\124\013\126\014\137\015\214\017\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\125\004" +
    "\131\005\134\006\136\007\124\013\126\014\137\015\217" +
    "\017\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\223\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\243\027\106\001\001\000" +
    "\010\016\114\024\227\027\112\001\001\000\002\001\001" +
    "\000\010\027\005\030\007\032\231\001\001\000\024\003" +
    "\125\004\131\005\134\006\136\007\124\013\126\014\137" +
    "\015\232\017\135\001\001\000\002\001\001\000\012\002" +
    "\067\003\026\022\141\023\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\067\003" +
    "\026\022\141\023\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList ProcList 
            {
              ProgramOP RESULT =null;
		int vdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<VarDeclOP> vdList = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcOP> pList = (ArrayList<ProcOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ProgramOP(vdList, pList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOP start_val = (ProgramOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VarDeclList ::= 
            {
              ArrayList<VarDeclOP> RESULT =null;
		ArrayList<VarDeclOP> list= new ArrayList<VarDeclOP>(); RESULT=list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDeclOP> RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclOP vd = (VarDeclOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclOP> vdList = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vdList.add(0,vd); RESULT=vdList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ProcList ::= Proc 
            {
              ArrayList<ProcOP> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcOP p = (ProcOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ProcOP> list= new ArrayList<ProcOP>(); list.add(p); RESULT= list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProcList ::= Proc ProcList 
            {
              ArrayList<ProcOP> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcOP p = (ProcOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ProcOP> pList = (ArrayList<ProcOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pList.add(0,p); RESULT=pList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdListInit SEMI 
            {
              VarDeclOP RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IdListInitOP> iListInit = (ArrayList<IdListInitOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= new VarDeclOP(t,iListInit);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Type ::= INT 
            {
              String RESULT =null;
		RESULT= "int";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= BOOL 
            {
              String RESULT =null;
		RESULT= "bool";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= FLOAT 
            {
              String RESULT =null;
		RESULT= "float";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= STRING 
            {
              String RESULT =null;
		RESULT= "String";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IdListInit ::= ID 
            {
              ArrayList<IdListInitOP> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IdListInitOP> list= new ArrayList<IdListInitOP>(); list.add(new IdListInitOP(new Id(val))); RESULT= list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IdListInit ::= IdListInit COMMA ID 
            {
              ArrayList<IdListInitOP> RESULT =null;
		int iListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdListInitOP> iListInit = (ArrayList<IdListInitOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 iListInit.add(new IdListInitOP(new Id(val))); RESULT= iListInit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= ID ASSIGN Expr 
            {
              ArrayList<IdListInitOP> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<IdListInitOP> listIE= new ArrayList<IdListInitOP>(); listIE.add(new IdListInitOP(new Id(val), e)); RESULT= listIE ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              ArrayList<IdListInitOP> RESULT =null;
		int iListInitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iListInitright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<IdListInitOP> iListInit = (ArrayList<IdListInitOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 iListInit.add(new IdListInitOP(new Id(val), e)); RESULT= iListInit; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON VarDeclList StatList RETURN ReturnExprs CORP SEMI 
            {
              ProcOP RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int pdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		ArrayList<ParDeclOP> pdList = (ArrayList<ParDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int rtListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rtListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<String> rtList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<VarDeclOP> vdList = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		BodyOP sList = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> re = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT= new ProcOP(new Id(val), pdList, rtList, new ProcBodyOP( vdList, sList, re));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON VarDeclList RETURN ReturnExprs CORP SEMI 
            {
              ProcOP RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int pdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ArrayList<ParDeclOP> pdList = (ArrayList<ParDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int rtListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rtListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<String> rtList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclOP> vdList = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> re = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT= new ProcOP(new Id(val), pdList, rtList, new ProcBodyOP( vdList, re));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Proc ::= PROC ID LPAR RPAR ResultTypeList COLON VarDeclList StatList RETURN ReturnExprs CORP SEMI 
            {
              ProcOP RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int rtListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rtListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		ArrayList<String> rtList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ArrayList<VarDeclOP> vdList = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		BodyOP sList = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> re = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT= new ProcOP(new Id(val), rtList, new ProcBodyOP( vdList, sList, re));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proc ::= PROC ID LPAR RPAR ResultTypeList COLON VarDeclList RETURN ReturnExprs CORP SEMI 
            {
              ProcOP RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int rtListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int rtListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ArrayList<String> rtList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int vdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<VarDeclOP> vdList = (ArrayList<VarDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Expr> re = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT= new ProcOP(new Id(val), rtList, new ProcBodyOP( vdList, re));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ResultTypeList ::= ResultType 
            {
              ArrayList<String> RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<String> list= new ArrayList<String>(); list.add(rt); RESULT= list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ResultTypeList ::= ResultType COMMA ResultTypeList 
            {
              ArrayList<String> RESULT =null;
		int rtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String rt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rtListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> rtList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 rtList.add(0,rt); RESULT=rtList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ReturnExprs ::= ExprList 
            {
              ArrayList<Expr> RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> eList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=eList;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ReturnExprs ::= 
            {
              ArrayList<Expr> RESULT =null;
		RESULT=null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ExprList ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Expr> list= new ArrayList<Expr>(); list.add(e); RESULT= list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<Expr> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> eList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 eList.add(0,e); RESULT=eList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ParamDeclList ::= ParDecl 
            {
              ArrayList<ParDeclOP> RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOP pd = (ParDeclOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<ParDeclOP> list= new ArrayList<ParDeclOP>(); list.add(pd); RESULT= list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParamDeclList ::= ParamDeclList SEMI ParDecl 
            {
              ArrayList<ParDeclOP> RESULT =null;
		int pdListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pdListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParDeclOP> pdList = (ArrayList<ParDeclOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOP pd = (ParDeclOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pdList.add(pd); RESULT=pdList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParDecl ::= Type IdList 
            {
              ParDeclOP RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int iListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Id> iList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new ParDeclOP(t, iList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IdList ::= ID 
            {
              ArrayList<Id> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Id> list= new ArrayList<Id>(); list.add(new Id(val)); RESULT= list;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IdList ::= IdList COMMA ID 
            {
              ArrayList<Id> RESULT =null;
		int iListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Id> iList = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 iList.add(new Id(val)); RESULT=iList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ResultType ::= Type 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultType",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ResultType ::= VOID 
            {
              String RESULT =null;
		RESULT= "void";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultType",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StatList ::= Stat 
            {
              BodyOP RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new BodyOP(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // StatList ::= Stat StatList 
            {
              BodyOP RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOP sList = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ArrayList<Stat> list= new ArrayList<Stat>(); list.add(s); list.addAll(sList.getStatList()); RESULT= new BodyOP(list); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= IfStat SEMI 
            {
              Stat RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfOP is = (IfOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= WhileStat SEMI 
            {
              Stat RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhileOP ws = (WhileOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= ws; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= ReadlnStat SEMI 
            {
              Stat RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReadOP rs = (ReadOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= rs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= WriteStat SEMI 
            {
              Stat RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WriteOP ws = (WriteOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= ws; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= AssignStat SEMI 
            {
              Stat RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignOP as = (AssignOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= CallProc SEMI 
            {
              Stat RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallProcOP cp = (CallProcOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new Stat(cp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IfStat ::= IF Expr THEN StatList ElifList Else FI 
            {
              IfOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		BodyOP sList = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ElifOP> elList = (ArrayList<ElifOP>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElseOP el = (ElseOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new IfOP(e, sList, elList, el); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ElifList ::= 
            {
              ArrayList<ElifOP> RESULT =null;
		RESULT= new ArrayList<ElifOP>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElifList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ElifList ::= Elif ElifList 
            {
              ArrayList<ElifOP> RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElifOP elif = (ElifOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ElifOP> elList = (ArrayList<ElifOP>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 elList.add(0, elif); RESULT=elList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElifList",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Elif ::= ELIF Expr THEN StatList 
            {
              ElifOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOP sList = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new ElifOP(e, sList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Else ::= 
            {
              ElseOP RESULT =null;
		 RESULT= null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Else ::= ELSE StatList 
            {
              ElseOP RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOP sList = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new ElseOP(sList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // WhileStat ::= WHILE StatList RETURN Expr DO StatList OD 
            {
              WhileOP RESULT =null;
		int sList1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sList1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		BodyOP sList1 = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sList2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sList2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOP sList2 = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new WhileOP(sList1,e , sList2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WhileStat ::= WHILE Expr DO StatList OD 
            {
              WhileOP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOP sList = (BodyOP)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new WhileOP(e,sList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ReadlnStat ::= READ LPAR IdList RPAR 
            {
              ReadOP RESULT =null;
		int ilistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Id> ilist = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new ReadOP(ilist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadlnStat",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WriteStat ::= WRITE LPAR ExprList RPAR 
            {
              WriteOP RESULT =null;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> elist = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new WriteOP(elist); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignOP RESULT =null;
		int ilistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ilistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Id> ilist = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Expr> elist = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= new AssignOP(ilist, elist);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CallProc ::= ID LPAR ExprList RPAR 
            {
              CallProcOP RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Expr> elist = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= new CallProcOP(val, elist);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallProc",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CallProc ::= ID LPAR RPAR 
            {
              CallProcOP RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= new CallProcOP(val) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallProc",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr ::= NULL 
            {
              Expr RESULT =null;
		 RESULT=new Null();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		 RESULT=new Bool(true) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		 RESULT=new Bool(false) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= INT_CONST 
            {
              Expr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new IntConst(Integer.parseInt(val)) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= FLOAT_CONST 
            {
              Expr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new FloatConst(Float.parseFloat(val)) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new StringConst(val) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= ID 
            {
              Expr RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new Id(val) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= CallProc 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallProcOP c = (CallProcOP)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Expr(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ee = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new PlusOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ee = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new MinusOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ee = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new TimesOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ee = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new DivOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ee = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new AndOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ee = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new OrOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ee = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new GreaterThanOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ee = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new GreaterEqualsOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ee = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new LessThanOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ee = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new LessEqualsOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ee = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new EqualsOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ee = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new NotEqualsOP(e,ee); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new UMinusOP(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new NotOP(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
