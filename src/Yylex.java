// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: C:/Users/Simone/IdeaProjects/mauro-avolicino_es4_tlp/srcjflexcup/lexerGenerator.flex

/* JFlex example: part of Java language lexer specification */
import java_cup.runtime.*;
import java.util.ArrayList;


/**
* This class is a simple example lexer.
*/

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int COMMENTS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\3\u1f00\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\3\u1f00\1\u3e00\1\u3f00\4\u1f00"+
    "\1\u4000\11\u1f00\3\u0100\1\u4100\1\u4200\13\u1f00\4\u0100\1\u4300"+
    "\63\u1f00\2\u0100\1\u4400\4\u1f00\1\u4500\100\u1f00\1\u4600\40\u1f00"+
    "\1\u4700\1\u4800\1\u1f00\1\u4900\1\u4a00\1\u4b00\1\u4c00\26\u1f00"+
    "\1\u4d00\21\u1f00\246\u0100\1\u4e00\20\u0100\1\u4f00\1\u5000\77\u1f00"+
    "\2\u0100\1\u5000\u0b05\u1f00\1\u5100\1\u5200\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\5\1\6\1\3\1\7\1\3\1\10\1\3"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\11\22\1\23\1\24\1\25\1\26\1\27\2\3"+
    "\32\7\1\3\1\30\2\3\1\7\1\3\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\2\7"+
    "\1\42\1\7\1\43\1\44\1\45\1\7\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\3\7\1\3\1\54\2\3"+
    "\41\0\2\3\4\7\4\3\1\7\2\3\1\0\7\3"+
    "\1\7\4\3\1\7\5\3\27\7\1\3\37\7\1\3"+
    "\u01ca\7\4\3\14\7\16\3\5\7\7\3\1\7\1\3"+
    "\1\7\21\3\160\0\5\7\1\3\2\7\2\3\4\7"+
    "\10\3\1\7\1\3\3\7\1\3\1\7\1\3\24\7"+
    "\1\3\123\7\1\3\213\7\1\3\5\0\2\3\236\7"+
    "\11\3\46\7\2\3\1\7\7\3\47\7\7\3\1\7"+
    "\1\3\55\0\1\3\1\0\1\3\2\0\1\3\2\0"+
    "\1\3\1\0\10\3\33\7\5\3\3\7\15\3\5\0"+
    "\6\3\1\7\4\3\13\0\5\3\53\7\37\0\4\3"+
    "\2\7\1\0\143\7\1\3\1\7\10\0\1\3\6\0"+
    "\2\7\2\0\1\3\4\0\2\7\12\0\3\7\2\3"+
    "\1\7\17\3\1\0\1\7\1\0\36\7\33\0\2\3"+
    "\131\7\13\0\1\7\16\3\12\0\41\7\11\0\2\7"+
    "\4\3\1\7\5\3\26\7\4\0\1\7\11\0\1\7"+
    "\3\0\1\7\5\0\22\3\31\7\3\0\104\3\1\7"+
    "\1\3\13\7\67\3\33\0\1\3\4\0\66\7\3\0"+
    "\1\7\22\0\1\7\7\0\12\7\2\0\2\3\12\0"+
    "\1\3\7\7\1\3\7\7\1\3\3\0\1\3\10\7"+
    "\2\3\2\7\2\3\26\7\1\3\7\7\1\3\1\7"+
    "\3\3\4\7\2\3\1\0\1\7\7\0\2\3\2\0"+
    "\2\3\3\0\1\7\10\3\1\0\4\3\2\7\1\3"+
    "\3\7\2\0\2\3\12\0\4\7\7\3\1\7\5\3"+
    "\3\0\1\3\6\7\4\3\2\7\2\3\26\7\1\3"+
    "\7\7\1\3\2\7\1\3\2\7\1\3\2\7\2\3"+
    "\1\0\1\3\5\0\4\3\2\0\2\3\3\0\3\3"+
    "\1\0\7\3\4\7\1\3\1\7\7\3\14\0\3\7"+
    "\1\0\13\3\3\0\1\3\11\7\1\3\3\7\1\3"+
    "\26\7\1\3\7\7\1\3\2\7\1\3\5\7\2\3"+
    "\1\0\1\7\10\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\7\17\3\2\7\2\0\2\3\12\0\1\3\1\7"+
    "\17\3\3\0\1\3\10\7\2\3\2\7\2\3\26\7"+
    "\1\3\7\7\1\3\2\7\1\3\5\7\2\3\1\0"+
    "\1\7\7\0\2\3\2\0\2\3\3\0\10\3\2\0"+
    "\4\3\2\7\1\3\3\7\2\0\2\3\12\0\1\3"+
    "\1\7\20\3\1\0\1\7\1\3\6\7\3\3\3\7"+
    "\1\3\4\7\3\3\2\7\1\3\1\7\1\3\2\7"+
    "\3\3\2\7\3\3\3\7\3\3\14\7\4\3\5\0"+
    "\3\3\3\0\1\3\4\0\2\3\1\7\6\3\1\0"+
    "\16\3\12\0\11\3\1\7\7\3\3\0\1\3\10\7"+
    "\1\3\3\7\1\3\27\7\1\3\12\7\1\3\5\7"+
    "\3\3\1\7\7\0\1\3\3\0\1\3\4\0\7\3"+
    "\2\0\1\3\2\7\6\3\2\7\2\0\2\3\12\0"+
    "\22\3\2\0\1\3\10\7\1\3\3\7\1\3\27\7"+
    "\1\3\12\7\1\3\5\7\2\3\1\0\1\7\7\0"+
    "\1\3\3\0\1\3\4\0\7\3\2\0\7\3\1\7"+
    "\1\3\2\7\2\0\2\3\12\0\1\3\2\7\17\3"+
    "\2\0\1\3\10\7\1\3\3\7\1\3\51\7\2\3"+
    "\1\7\7\0\1\3\3\0\1\3\4\0\1\7\10\3"+
    "\1\0\10\3\2\7\2\0\2\3\12\0\12\3\6\7"+
    "\2\3\2\0\1\3\22\7\3\3\30\7\1\3\11\7"+
    "\1\3\1\7\2\3\7\7\3\3\1\0\4\3\6\0"+
    "\1\3\1\0\1\3\10\0\22\3\2\0\15\3\60\7"+
    "\1\0\2\7\7\0\4\3\10\7\10\0\1\3\12\0"+
    "\47\3\2\7\1\3\1\7\2\3\2\7\1\3\1\7"+
    "\2\3\1\7\6\3\4\7\1\3\7\7\1\3\3\7"+
    "\1\3\1\7\1\3\1\7\2\3\2\7\1\3\4\7"+
    "\1\0\2\7\6\0\1\3\2\0\1\7\2\3\5\7"+
    "\1\3\1\7\1\3\6\0\2\3\12\0\2\3\4\7"+
    "\40\3\1\7\27\3\2\0\6\3\12\0\13\3\1\0"+
    "\1\3\1\0\1\3\1\0\4\3\2\0\10\7\1\3"+
    "\44\7\4\3\24\0\1\3\2\0\5\7\13\0\1\3"+
    "\44\0\11\3\1\0\71\3\53\7\24\0\1\7\12\0"+
    "\6\3\6\7\4\0\4\7\3\0\1\7\3\0\2\7"+
    "\7\0\3\7\4\0\15\7\14\0\1\7\17\0\2\3"+
    "\46\7\1\3\1\7\5\3\1\7\2\3\53\7\1\3"+
    "\115\7\1\3\4\7\2\3\7\7\1\3\1\7\1\3"+
    "\4\7\2\3\51\7\1\3\4\7\2\3\41\7\1\3"+
    "\4\7\2\3\7\7\1\3\1\7\1\3\4\7\2\3"+
    "\17\7\1\3\71\7\1\3\4\7\2\3\103\7\2\3"+
    "\3\0\40\3\20\7\20\3\125\7\14\3\u016c\7\2\3"+
    "\21\7\1\3\32\7\5\3\113\7\3\3\3\7\17\3"+
    "\15\7\1\3\4\7\3\0\13\3\22\7\3\0\13\3"+
    "\22\7\2\0\14\3\15\7\1\3\3\7\1\3\2\0"+
    "\14\3\64\7\40\0\3\3\1\7\3\3\2\7\1\0"+
    "\2\3\12\0\41\3\3\0\2\3\12\0\6\3\130\7"+
    "\10\3\51\7\1\0\1\7\5\3\106\7\12\3\35\7"+
    "\3\3\14\0\4\3\14\0\12\3\12\0\36\7\2\3"+
    "\5\7\13\3\54\7\4\3\21\0\7\7\2\0\6\3"+
    "\12\0\46\3\27\7\5\0\4\3\65\7\12\0\1\3"+
    "\35\0\2\3\13\0\6\3\12\0\15\3\1\7\130\3"+
    "\5\0\57\7\21\0\7\7\4\3\12\0\21\3\11\0"+
    "\14\3\3\0\36\7\15\0\2\7\12\0\54\7\16\0"+
    "\14\3\44\7\24\0\10\3\12\0\3\3\3\7\12\0"+
    "\44\7\122\3\3\0\1\3\25\0\4\7\1\0\4\7"+
    "\3\0\2\7\11\3\300\7\47\0\25\3\4\0\26\7"+
    "\2\3\6\7\2\3\46\7\2\3\6\7\2\3\10\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\37\7"+
    "\2\3\65\7\1\3\7\7\1\3\1\7\3\3\3\7"+
    "\1\3\7\7\3\3\4\7\2\3\6\7\4\3\15\7"+
    "\5\3\3\7\1\3\7\7\16\3\5\0\32\3\5\0"+
    "\20\3\2\7\23\3\1\7\13\3\5\0\5\3\6\0"+
    "\1\3\1\7\15\3\1\7\20\3\15\7\3\3\33\7"+
    "\25\3\15\0\4\3\1\0\3\3\14\0\21\3\1\7"+
    "\4\3\1\7\2\3\12\7\1\3\1\7\3\3\5\7"+
    "\6\3\1\7\1\3\1\7\1\3\1\7\1\3\4\7"+
    "\1\3\13\7\2\3\4\7\5\3\5\7\4\3\1\7"+
    "\21\3\51\7\u0177\3\57\7\1\3\57\7\1\3\205\7"+
    "\6\3\4\7\3\0\2\7\14\3\46\7\1\3\1\7"+
    "\5\3\1\7\2\3\70\7\7\3\1\7\17\3\1\0"+
    "\27\7\11\3\7\7\1\3\7\7\1\3\7\7\1\3"+
    "\7\7\1\3\7\7\1\3\7\7\1\3\7\7\1\3"+
    "\7\7\1\3\40\0\57\3\1\7\325\3\3\7\31\3"+
    "\11\7\6\0\1\3\5\7\2\3\5\7\4\3\126\7"+
    "\2\3\2\0\2\3\3\7\1\3\132\7\1\3\4\7"+
    "\5\3\51\7\3\3\136\7\21\3\33\7\65\3\306\7"+
    "\112\3\315\7\63\3\215\7\103\3\56\7\2\3\15\7"+
    "\3\3\20\7\12\0\2\7\24\3\57\7\1\0\4\3"+
    "\12\0\1\3\31\7\7\3\1\0\120\7\2\0\45\3"+
    "\11\7\2\3\147\7\2\3\4\7\1\3\4\7\14\3"+
    "\13\7\115\3\12\7\1\0\3\7\1\0\4\7\1\0"+
    "\27\7\5\0\20\3\1\7\7\3\64\7\14\3\2\0"+
    "\62\7\21\0\13\3\12\0\6\3\22\0\6\7\3\3"+
    "\1\7\4\3\12\0\34\7\10\0\2\3\27\7\15\0"+
    "\14\3\35\7\3\3\4\0\57\7\16\0\16\3\1\7"+
    "\12\0\46\3\51\7\16\0\11\3\3\7\1\0\10\7"+
    "\2\0\2\3\12\0\6\3\27\7\3\3\1\7\1\0"+
    "\4\3\60\7\1\0\1\7\3\0\2\7\2\0\5\7"+
    "\2\0\1\7\1\0\1\7\30\3\3\7\2\3\13\7"+
    "\5\0\2\3\3\7\2\0\12\3\6\7\2\3\6\7"+
    "\2\3\6\7\11\3\7\7\1\3\7\7\221\3\43\7"+
    "\10\0\1\3\2\0\2\3\12\0\6\3\244\7\14\3"+
    "\27\7\4\3\61\7\4\3\156\7\2\3\152\7\46\3"+
    "\7\7\14\3\5\7\5\3\1\7\1\0\12\7\1\3"+
    "\15\7\1\3\5\7\1\3\1\7\1\3\2\7\1\3"+
    "\2\7\1\3\154\7\41\3\153\7\22\3\100\7\2\3"+
    "\66\7\50\3\15\7\3\3\20\0\20\3\7\0\14\3"+
    "\2\7\30\3\3\7\31\3\1\7\6\3\5\7\1\3"+
    "\207\7\2\3\1\0\4\3\1\7\13\3\12\0\7\3"+
    "\32\7\4\3\1\7\1\3\32\7\13\3\131\7\3\3"+
    "\6\7\2\3\6\7\2\3\6\7\2\3\3\7\3\3"+
    "\2\7\3\3\2\7\22\3\3\0\4\3\14\7\1\3"+
    "\32\7\1\3\23\7\1\3\2\7\1\3\17\7\2\3"+
    "\16\7\42\3\173\7\105\3\65\7\210\3\1\0\202\3"+
    "\35\7\3\3\61\7\57\3\37\7\21\3\33\7\65\3"+
    "\36\7\2\3\44\7\4\3\10\7\1\3\5\7\52\3"+
    "\236\7\2\3\12\0\126\3\6\7\2\3\1\7\1\3"+
    "\54\7\1\3\2\7\3\3\1\7\2\3\27\7\252\3"+
    "\26\7\12\3\32\7\106\3\70\7\6\3\2\7\100\3"+
    "\1\7\3\0\1\3\2\0\5\3\4\0\4\7\1\3"+
    "\3\7\1\3\33\7\4\3\3\0\4\3\1\0\40\3"+
    "\35\7\203\3\66\7\12\3\26\7\12\3\23\7\215\3"+
    "\111\7\267\3\3\0\65\7\17\0\37\3\12\0\20\3"+
    "\3\0\55\7\13\0\2\3\1\0\22\3\31\7\7\3"+
    "\12\0\6\3\3\0\44\7\16\0\1\3\12\0\100\3"+
    "\3\0\60\7\16\0\4\7\13\3\12\0\246\3\53\7"+
    "\15\0\10\3\12\0\66\3\157\7\221\3\143\7\235\3"+
    "\57\7\321\3\71\7\307\3\105\7\13\3\1\7\56\0"+
    "\20\3\4\0\15\7\140\3\2\7\u0163\3\5\0\3\3"+
    "\26\0\2\3\7\0\36\3\4\0\224\3\3\0\273\3"+
    "\125\7\1\3\107\7\1\3\2\7\2\3\1\7\2\3"+
    "\2\7\2\3\4\7\1\3\14\7\1\3\1\7\1\3"+
    "\7\7\1\3\101\7\1\3\4\7\2\3\10\7\1\3"+
    "\7\7\1\3\34\7\1\3\4\7\1\3\5\7\1\3"+
    "\1\7\3\3\7\7\1\3\u0154\7\2\3\31\7\1\3"+
    "\31\7\1\3\37\7\1\3\31\7\1\3\37\7\1\3"+
    "\31\7\1\3\37\7\1\3\31\7\1\3\37\7\1\3"+
    "\31\7\1\3\10\7\2\3\62\0\4\7\1\3\33\7"+
    "\1\3\2\7\1\3\1\7\2\3\1\7\1\3\12\7"+
    "\1\3\4\7\1\3\1\7\1\3\1\7\6\3\1\7"+
    "\4\3\1\7\1\3\1\7\1\3\1\7\1\3\3\7"+
    "\1\3\2\7\1\3\1\7\2\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\1\7\1\3\2\7"+
    "\1\3\1\7\2\3\4\7\1\3\7\7\1\3\4\7"+
    "\1\3\4\7\1\3\1\7\1\3\12\7\1\3\21\7"+
    "\5\3\3\7\1\3\5\7\1\3\21\7\104\3\327\7"+
    "\51\3\65\7\13\3\336\7\343\3\1\0\36\3\140\0"+
    "\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[21248];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\16\5\1\1\1\23\1\24"+
    "\1\25\2\26\1\27\1\30\1\31\1\0\1\32\1\33"+
    "\1\34\1\35\2\5\1\36\2\5\1\37\1\5\1\40"+
    "\2\5\1\41\10\5\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\6\5\1\51\11\5\1\52\1\53\1\54"+
    "\1\55\2\5\1\56\1\57\1\60\1\5\1\61\1\62"+
    "\1\63\2\5\1\64\1\65\1\5\1\66\1\67\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\207\0\264\0\207\0\207"+
    "\0\341\0\u010e\0\207\0\207\0\207\0\207\0\207\0\u013b"+
    "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\207\0\u021c\0\207\0\u0249"+
    "\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1"+
    "\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec\0\u0519"+
    "\0\207\0\u0546\0\207\0\u0573\0\207\0\207\0\207\0\u05a0"+
    "\0\207\0\207\0\207\0\207\0\u05cd\0\u05fa\0\341\0\u0627"+
    "\0\u0654\0\341\0\u0681\0\341\0\u06ae\0\u06db\0\341\0\u0708"+
    "\0\u0735\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0843\0\207"+
    "\0\207\0\207\0\207\0\207\0\207\0\u05a0\0\u0870\0\u089d"+
    "\0\u08ca\0\u08f7\0\u0924\0\u0951\0\341\0\u097e\0\u09ab\0\u09d8"+
    "\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\341\0\341"+
    "\0\341\0\341\0\u0b13\0\u0b40\0\341\0\341\0\341\0\u0b6d"+
    "\0\341\0\341\0\341\0\u0b9a\0\u0bc7\0\341\0\341\0\u0bf4"+
    "\0\341\0\341\0\341";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\4\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\4"+
    "\1\11\1\31\1\32\1\33\1\34\1\35\2\11\1\36"+
    "\1\11\1\37\1\40\1\41\1\42\1\43\1\44\1\11"+
    "\1\45\1\46\1\47\6\50\1\51\21\50\1\52\24\50"+
    "\13\53\1\54\41\53\57\0\1\5\52\0\1\11\6\0"+
    "\1\11\11\0\2\11\6\0\23\11\11\0\1\55\73\0"+
    "\1\56\40\0\1\57\60\0\1\60\54\0\1\60\1\0"+
    "\2\23\60\0\1\61\54\0\1\62\1\63\53\0\1\64"+
    "\26\0\1\11\6\0\1\11\11\0\2\11\6\0\13\11"+
    "\1\65\7\11\1\0\1\11\6\0\1\11\11\0\2\11"+
    "\6\0\13\11\1\66\7\11\1\0\1\11\6\0\1\11"+
    "\11\0\2\11\6\0\13\11\1\67\7\11\1\0\1\11"+
    "\6\0\1\11\11\0\2\11\6\0\11\11\1\70\11\11"+
    "\1\0\1\11\6\0\1\11\11\0\2\11\6\0\1\71"+
    "\7\11\1\72\1\73\11\11\1\0\1\11\6\0\1\11"+
    "\11\0\2\11\6\0\5\11\1\74\4\11\1\75\10\11"+
    "\1\0\1\11\6\0\1\11\11\0\2\11\6\0\20\11"+
    "\1\76\2\11\1\0\1\11\6\0\1\11\11\0\2\11"+
    "\6\0\3\11\1\77\17\11\1\0\1\11\6\0\1\11"+
    "\11\0\2\11\6\0\15\11\1\100\5\11\1\0\1\11"+
    "\6\0\1\11\11\0\2\11\6\0\4\11\1\101\16\11"+
    "\1\0\1\11\6\0\1\11\11\0\2\11\6\0\17\11"+
    "\1\102\3\11\1\0\1\11\6\0\1\11\11\0\2\11"+
    "\6\0\7\11\1\103\5\11\1\104\5\11\1\0\1\11"+
    "\6\0\1\11\11\0\2\11\6\0\13\11\1\105\7\11"+
    "\1\0\1\11\6\0\1\11\11\0\2\11\6\0\7\11"+
    "\1\106\5\11\1\107\5\11\55\0\1\110\6\50\1\0"+
    "\21\50\1\0\24\50\6\0\1\111\34\0\1\112\2\0"+
    "\1\113\1\0\1\114\24\0\1\115\55\0\1\60\1\116"+
    "\32\0\1\11\6\0\1\11\11\0\2\11\6\0\13\11"+
    "\1\117\7\11\1\0\1\11\6\0\1\11\11\0\2\11"+
    "\6\0\15\11\1\120\5\11\1\0\1\11\6\0\1\11"+
    "\11\0\2\11\6\0\10\11\1\121\5\11\1\122\4\11"+
    "\1\0\1\11\6\0\1\11\11\0\2\11\6\0\11\11"+
    "\1\123\11\11\1\0\1\11\6\0\1\11\11\0\2\11"+
    "\6\0\13\11\1\124\7\11\1\0\1\11\6\0\1\11"+
    "\11\0\2\11\6\0\17\11\1\125\3\11\1\0\1\11"+
    "\6\0\1\11\11\0\2\11\6\0\11\11\1\126\11\11"+
    "\1\0\1\11\6\0\1\11\11\0\2\11\6\0\13\11"+
    "\1\127\7\11\1\0\1\11\6\0\1\11\11\0\2\11"+
    "\6\0\1\130\22\11\1\0\1\11\6\0\1\11\11\0"+
    "\2\11\6\0\15\11\1\131\5\11\1\0\1\11\6\0"+
    "\1\11\11\0\2\11\6\0\4\11\1\132\16\11\1\0"+
    "\1\11\6\0\1\11\11\0\2\11\6\0\20\11\1\133"+
    "\2\11\1\0\1\11\6\0\1\11\11\0\2\11\6\0"+
    "\10\11\1\134\12\11\1\0\1\11\6\0\1\11\11\0"+
    "\2\11\6\0\10\11\1\135\12\11\1\0\1\11\6\0"+
    "\1\11\11\0\2\11\6\0\10\11\1\136\12\11\1\0"+
    "\1\11\6\0\1\11\11\0\2\11\6\0\11\11\1\137"+
    "\11\11\1\0\1\11\6\0\1\11\11\0\2\11\6\0"+
    "\14\11\1\140\6\11\1\0\1\11\6\0\1\11\11\0"+
    "\2\11\6\0\5\11\1\141\15\11\1\0\1\11\6\0"+
    "\1\11\11\0\2\11\6\0\4\11\1\142\16\11\1\0"+
    "\1\11\6\0\1\11\11\0\2\11\6\0\16\11\1\143"+
    "\4\11\1\0\1\11\6\0\1\11\11\0\2\11\6\0"+
    "\1\144\22\11\1\0\1\11\6\0\1\11\11\0\2\11"+
    "\6\0\11\11\1\145\11\11\1\0\1\11\6\0\1\11"+
    "\11\0\2\11\6\0\2\11\1\146\20\11\1\0\1\11"+
    "\6\0\1\11\11\0\2\11\6\0\3\11\1\147\17\11"+
    "\1\0\1\11\6\0\1\11\11\0\2\11\6\0\10\11"+
    "\1\150\12\11\1\0\1\11\6\0\1\11\11\0\2\11"+
    "\6\0\12\11\1\151\10\11\1\0\1\11\6\0\1\11"+
    "\11\0\2\11\6\0\4\11\1\152\16\11\1\0\1\11"+
    "\6\0\1\11\11\0\2\11\6\0\3\11\1\153\17\11"+
    "\1\0\1\11\6\0\1\11\11\0\2\11\6\0\11\11"+
    "\1\154\11\11\1\0\1\11\6\0\1\11\11\0\2\11"+
    "\6\0\17\11\1\155\3\11\1\0\1\11\6\0\1\11"+
    "\11\0\2\11\6\0\4\11\1\156\16\11\1\0\1\11"+
    "\6\0\1\11\11\0\2\11\6\0\17\11\1\157\3\11"+
    "\1\0\1\11\6\0\1\11\11\0\2\11\6\0\12\11"+
    "\1\160\10\11\1\0\1\11\6\0\1\11\11\0\2\11"+
    "\6\0\4\11\1\161\16\11\1\0\1\11\6\0\1\11"+
    "\11\0\2\11\6\0\4\11\1\162\16\11\1\0\1\11"+
    "\6\0\1\11\11\0\2\11\6\0\6\11\1\163\14\11"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3105];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\1\1\2\11\2\1\5\11\5\1\1\11"+
    "\1\1\1\11\21\1\1\11\1\1\1\11\1\1\3\11"+
    "\1\0\4\11\23\1\6\11\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
      StringBuffer string = new StringBuffer();
      //public ArrayList<String> SymbolTable= new ArrayList<String>();

      private Symbol generateToken(int type) {
        return new Symbol(type);
      }

      private Symbol generateToken(int type, Object value) {
            /*
              if(type==20 && !SymbolTable.contains(value.toString())){
                SymbolTable.add(value.toString());
              }
              if(type==6){
                  SymbolTable.add(value.toString());
              }
              */

              //return new Symbol(type, SymbolTable.indexOf(value.toString()));
              return new Symbol(type, value.toString());
      }
      /*
      private Symbol generateError(String value) throws Exception {
      }
      */




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              throw new Error("Errore! Stringa costante non completata.");
            }  // fall though
            case 116: break;
            case COMMENTS: {
              throw new Error("Errore! Commento non chiuso.");
            }  // fall though
            case 117: break;
            default:
              {
                return new Symbol(sym.EOF);
              }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Errore lessicale su "+yytext()+" nella posizione "+yyline+":"+yycolumn+".");
            }
            // fall through
          case 57: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 58: break;
          case 3:
            { return generateToken(sym.NOT);
            }
            // fall through
          case 59: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 60: break;
          case 5:
            { return generateToken(sym.ID, yytext());
            }
            // fall through
          case 61: break;
          case 6:
            { return generateToken(sym.LPAR);
            }
            // fall through
          case 62: break;
          case 7:
            { return generateToken(sym.RPAR);
            }
            // fall through
          case 63: break;
          case 8:
            { return generateToken(sym.TIMES);
            }
            // fall through
          case 64: break;
          case 9:
            { return generateToken(sym.PLUS);
            }
            // fall through
          case 65: break;
          case 10:
            { return generateToken(sym.COMMA);
            }
            // fall through
          case 66: break;
          case 11:
            { return generateToken(sym.MINUS);
            }
            // fall through
          case 67: break;
          case 12:
            { return generateToken(sym.DIV);
            }
            // fall through
          case 68: break;
          case 13:
            { return generateToken(sym.INT_CONST, Integer.parseInt(yytext()));
            }
            // fall through
          case 69: break;
          case 14:
            { return generateToken(sym.COLON);
            }
            // fall through
          case 70: break;
          case 15:
            { return generateToken(sym.SEMI);
            }
            // fall through
          case 71: break;
          case 16:
            { return generateToken(sym.LT);
            }
            // fall through
          case 72: break;
          case 17:
            { return generateToken(sym.EQ);
            }
            // fall through
          case 73: break;
          case 18:
            { return generateToken(sym.GT);
            }
            // fall through
          case 74: break;
          case 19:
            { string.append( yytext() );
            }
            // fall through
          case 75: break;
          case 20:
            { yybegin(YYINITIAL);
                return generateToken(sym.STRING_CONST,
                string.toString());
            }
            // fall through
          case 76: break;
          case 21:
            { string.append("\\");
            }
            // fall through
          case 77: break;
          case 22:
            { /* Ignore */
            }
            // fall through
          case 78: break;
          case 23:
            { return generateToken(sym.AND);
            }
            // fall through
          case 79: break;
          case 24:
            { return generateToken(sym.RETURN);
            }
            // fall through
          case 80: break;
          case 25:
            { yybegin(COMMENTS);
            }
            // fall through
          case 81: break;
          case 26:
            { return generateToken(sym.ASSIGN);
            }
            // fall through
          case 82: break;
          case 27:
            { return generateToken(sym.LE);
            }
            // fall through
          case 83: break;
          case 28:
            { return generateToken(sym.NE);
            }
            // fall through
          case 84: break;
          case 29:
            { return generateToken(sym.GE);
            }
            // fall through
          case 85: break;
          case 30:
            { return generateToken(sym.DO);
            }
            // fall through
          case 86: break;
          case 31:
            { return generateToken(sym.FI);
            }
            // fall through
          case 87: break;
          case 32:
            { return generateToken(sym.IF);
            }
            // fall through
          case 88: break;
          case 33:
            { return generateToken(sym.OD);
            }
            // fall through
          case 89: break;
          case 34:
            { return generateToken(sym.OR);
            }
            // fall through
          case 90: break;
          case 35:
            { string.append("\"");
            }
            // fall through
          case 91: break;
          case 36:
            { string.append("\n");
            }
            // fall through
          case 92: break;
          case 37:
            { string.append("\r");
            }
            // fall through
          case 93: break;
          case 38:
            { string.append("\t");
            }
            // fall through
          case 94: break;
          case 39:
            { yybegin(YYINITIAL);
            }
            // fall through
          case 95: break;
          case 40:
            { return generateToken(sym.FLOAT_CONST, Double.parseDouble(yytext()));
            }
            // fall through
          case 96: break;
          case 41:
            { return generateToken(sym.INT);
            }
            // fall through
          case 97: break;
          case 42:
            { return generateToken(sym.BOOL);
            }
            // fall through
          case 98: break;
          case 43:
            { return generateToken(sym.CORP);
            }
            // fall through
          case 99: break;
          case 44:
            { return generateToken(sym.ELIF);
            }
            // fall through
          case 100: break;
          case 45:
            { return generateToken(sym.ELSE);
            }
            // fall through
          case 101: break;
          case 46:
            { return generateToken(sym.NULL);
            }
            // fall through
          case 102: break;
          case 47:
            { return generateToken(sym.PROC);
            }
            // fall through
          case 103: break;
          case 48:
            { return generateToken(sym.READ);
            }
            // fall through
          case 104: break;
          case 49:
            { return generateToken(sym.THEN);
            }
            // fall through
          case 105: break;
          case 50:
            { return generateToken(sym.TRUE);
            }
            // fall through
          case 106: break;
          case 51:
            { return generateToken(sym.VOID);
            }
            // fall through
          case 107: break;
          case 52:
            { return generateToken(sym.FALSE);
            }
            // fall through
          case 108: break;
          case 53:
            { return generateToken(sym.FLOAT);
            }
            // fall through
          case 109: break;
          case 54:
            { return generateToken(sym.WHILE);
            }
            // fall through
          case 110: break;
          case 55:
            { return generateToken(sym.WRITE);
            }
            // fall through
          case 111: break;
          case 56:
            { return generateToken(sym.STRING);
            }
            // fall through
          case 112: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
